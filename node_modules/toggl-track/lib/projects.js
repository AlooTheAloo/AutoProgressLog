"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Projects = void 0;
var Projects = /** @class */ (function () {
    function Projects(toggl) {
        var _this = this;
        this.toggl = toggl;
        this.users = {
            /**
             * GET Get workspace projects users​
             * List all projects users for a given workspace.
             *
             * https://developers.track.toggl.com/docs/api/projects#get-get-workspace-projects-users
             */
            list: function (workspaceId) {
                return _this.toggl.request("workspaces/".concat(workspaceId, "/project_users"));
            },
            /**
             * POST Add an user into workspace projects users​
             * Include a project user for a given workspace.
             *
             * https://developers.track.toggl.com/docs/api/projects#post-add-an-user-into-workspace-projects-users
             */
            add: function (workspaceId, body) {
                return _this.toggl.request("workspaces/".concat(workspaceId, "/project_users"), {
                    method: 'POST',
                    body: {
                        labour_cost: body === null || body === void 0 ? void 0 : body.labourCost,
                        manager: body === null || body === void 0 ? void 0 : body.manager,
                        postedFields: body === null || body === void 0 ? void 0 : body.postedFields,
                        project_id: body === null || body === void 0 ? void 0 : body.projectId,
                        user_id: body === null || body === void 0 ? void 0 : body.userId,
                    },
                });
            },
            /**
             * PATCH Patch project users from workspace​
             * Patch a list of project users for a given workspace.
             *
             * https://developers.track.toggl.com/docs/api/projects#patch-patch-project-users-from-workspace
             */
            set: function (workspaceId, query) {
                var projectUserIdsString = query.projectUserIds.join(',');
                return _this.toggl.request("workspaces/".concat(workspaceId, "/project_users"), {
                    method: 'PATCH',
                    query: {
                        project_user_ids: projectUserIdsString,
                    },
                });
            },
            /**
             * PUT Update an user into workspace projects users​
             * Update the data for a project user for a given workspace.
             *
             * https://developers.track.toggl.com/docs/api/projects#put-update-an-user-into-workspace-projects-users
             */
            update: function (workspaceId, projectUserId, body) {
                return _this.toggl.request("workspaces/".concat(workspaceId, "/project_users/").concat(projectUserId), {
                    method: 'PUT',
                    body: {
                        labour_cost: body === null || body === void 0 ? void 0 : body.labourCost,
                        manager: body === null || body === void 0 ? void 0 : body.manager,
                        postedFields: body === null || body === void 0 ? void 0 : body.postedFields, // this is camalCase according to the API docs
                    },
                });
            },
            /**
             * DELETE Delete a project user from workspace projects users​
             * Delete a project user for a given workspace.
             *
             * https://developers.track.toggl.com/docs/api/projects#delete-delete-a-project-user-from-workspace-projects-users
             */
            delete: function (workspaceId, projectUserId) {
                return _this.toggl.request('workspaces/{workspaceId}/project_users/{projectUserId}', { method: 'DELETE' });
            },
        };
    }
    /**
     * GET WorkspaceProjects​
     * Get projects for given workspace.
     *
     * https://developers.track.toggl.com/docs/api/projects#get-workspaceprojects
     */
    Projects.prototype.list = function (workspaceId, body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request("workspaces/".concat(workspaceId, "/projects"), {
                        // NOTE: according to Toggl's API docs, everything here is camalCase
                        body: body,
                    })];
            });
        });
    };
    /**
     * POST WorkspaceProjects​
     * Create project for given workspace.
     *
     * https://developers.track.toggl.com/docs/api/projects#post-workspaceprojects
     */
    Projects.prototype.create = function (workspaceId, body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request("workspaces/".concat(workspaceId, "/projects"), {
                        method: 'POST',
                        body: body,
                    })];
            });
        });
    };
    /**
     * PATCH WorkspaceProjects​
     * Bulk editing workspace projects.
     *
     * https://developers.track.toggl.com/docs/api/projects#patch-workspaceprojects
     */
    Projects.prototype.updateBulk = function (workspaceId, projectIds, body) {
        return __awaiter(this, void 0, void 0, function () {
            var projectIdsString;
            return __generator(this, function (_a) {
                projectIdsString = projectIds.join(',');
                return [2 /*return*/, this.toggl.request("workspaces/".concat(workspaceId, "/projects/").concat(projectIdsString), {
                        method: 'PATCH',
                        body: {
                            op: body === null || body === void 0 ? void 0 : body.op,
                            path: body === null || body === void 0 ? void 0 : body.path,
                        },
                    })];
            });
        });
    };
    /**
     * GET WorkspaceProject
     * Get project for given workspace.
     *
     * https://developers.track.toggl.com/docs/api/projects#get-workspaceproject
     */
    Projects.prototype.get = function (workspaceId, projectId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request("workspaces/".concat(workspaceId, "/projects/").concat(projectId))];
            });
        });
    };
    /**
     * POST WorkspaceProject
     * Post project for given workspace.
     *
     * https://developers.track.toggl.com/docs/api/projects#post-workspaceproject
     */
    Projects.prototype.update = function (workspaceId, projectId, body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request("workspaces/".concat(workspaceId, "/projects/").concat(projectId), {
                        method: 'POST',
                        body: body,
                    })];
            });
        });
    };
    /**
     * DELETE WorkspaceProject
     * Delete project for given workspace.
     *
     * https://developers.track.toggl.com/docs/api/projects#delete-workspaceproject
     */
    Projects.prototype.delete = function (workspaceId, projectId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request("workspaces/".concat(workspaceId, "/projects/").concat(projectId), { method: 'DELETE' })];
            });
        });
    };
    return Projects;
}());
exports.Projects = Projects;
