"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Me = void 0;
var Me = /** @class */ (function () {
    function Me(toggl) {
        var _this = this;
        this.toggl = toggl;
        this.lostPassword = {
            /**
             * GET LostPassword
             * Verifies the user request to reset the password.
             *
             * https://developers.track.toggl.com/docs/api/me#get-logged
             */
            verify: function () { return _this.toggl.request('me/lost_passwords'); },
            /**
             * POST LostPassword
             * Handles lost password request confirmation.
             *
             * https://developers.track.toggl.com/docs/api/me#get-logged
             */
            confirm: function (body) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.toggl.request('me/lost_passwords/confirm', {
                            method: 'POST',
                            body: {
                                code: body.code,
                                password: body.password,
                                user_id: body.userId,
                            },
                        })];
                });
            }); },
            /**
             * POST LostPassword​
             * Handles the users request to reset the password.
             *
             * https://developers.track.toggl.com/docs/api/me#post-lostpassword-1
             */
            reset: function (tokenCode, body) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.toggl.request("me/lost_passwords/".concat(tokenCode), {
                            method: 'POST',
                            body: {
                                email: body.email,
                            },
                        })];
                });
            }); },
        };
    }
    /**
     * GET Me​
     * Returns details for the current user.
     *
     * https://developers.track.toggl.com/docs/api/me#get-me
     */
    Me.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.toggl.request('me')];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * PUT Me​
     * Updates details for the current user.
     *
     * https://developers.track.toggl.com/docs/api/me#put-me
     */
    Me.prototype.update = function (body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me', {
                        method: 'PUT',
                        body: {
                            beginning_of_week: body.beginningOfWeek,
                            country_id: body.countryId,
                            current_password: body.currentPassword,
                            default_workspace_id: body.defaultWorkspaceId,
                            email: body.email,
                            fullname: body.fullname,
                            password: body.password,
                            timezone: body.timezone,
                        },
                    })];
            });
        });
    };
    /**
     * GET Clients​
     * Get Clients.
     *
     * https://developers.track.toggl.com/docs/api/me#get-clients
     */
    Me.prototype.clients = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/clients')];
            });
        });
    };
    /**
     * POST CloseAccount​
     * Close Account
     *
     * https://developers.track.toggl.com/docs/api/me#post-closeaccount
     */
    Me.prototype.closeAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/close_account', {
                        method: 'POST',
                    })];
            });
        });
    };
    /**
     * GET Features​
     * Get features.
     *
     * https://developers.track.toggl.com/docs/api/me#get-features
     */
    Me.prototype.features = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/features')];
            });
        });
    };
    /**
     * GET User's last known location
     * Returns the client's IP-based location. If no data is present, empty response will be yielded.
     *
     * https://developers.track.toggl.com/docs/api/me#get-users-last-known-location
     */
    Me.prototype.location = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/location')];
            });
        });
    };
    /**
     * GET Logged​
     * Returns whether the current user is logged in or not.
     *
     * https://developers.track.toggl.com/docs/api/me#get-logged
     */
    Me.prototype.logged = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/logged')];
            });
        });
    };
    /**
     * GET Organizations that a user is part of​
     * Get all organizations a given user is part of.
     *
     * https://developers.track.toggl.com/docs/api/me#get-organizations-that-a-user-is-part-of
     */
    Me.prototype.organizations = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/organizations')];
            });
        });
    };
    /**
     * GET Projects​
     * Get projects​
     *
     * https://developers.track.toggl.com/docs/api/me#get-projects
     */
    Me.prototype.projects = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/projects', {
                        query: {
                            include_archived: query === null || query === void 0 ? void 0 : query.includeArchived,
                        },
                    })];
            });
        });
    };
    /**
     * GET ProjectsPaginated​
     * Get paginated projects.
     *
     * https://developers.track.toggl.com/docs/api/me#get-projectspaginated
     */
    Me.prototype.projectsPaginated = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/projects/paginated', {
                        query: {
                            start_project_id: query === null || query === void 0 ? void 0 : query.startProjectId,
                        },
                    })];
            });
        });
    };
    /**
     * GET Tags​
     * Returns tags for the current user.
     *
     * https://developers.track.toggl.com/docs/api/me#get-tags
     */
    Me.prototype.tags = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/tags')];
            });
        });
    };
    /**
     * GET Tasks​
     * Returns tasks from projects in which the user is participating.
     *
     * https://developers.track.toggl.com/docs/api/me#get-tasks
     */
    Me.prototype.tasks = function (query) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.toggl.request('me/tasks', {
                        query: {
                            since: (_a = query === null || query === void 0 ? void 0 : query.since) === null || _a === void 0 ? void 0 : _a.toString(),
                            include_not_active: query === null || query === void 0 ? void 0 : query.includeNotActive,
                        },
                    })];
            });
        });
    };
    /**
     * GET TrackReminders​
     * Returns a list of track reminders.
     *
     * https://developers.track.toggl.com/docs/api/me#get-trackreminders
     */
    Me.prototype.trackReminders = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/track_reminders')];
            });
        });
    };
    /**
     * GET WebTimer​
     * Get web timer.
     *
     * https://developers.track.toggl.com/docs/api/me#get-webtimer
     */
    Me.prototype.webTimer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.toggl.request('me/web-timer')];
            });
        });
    };
    return Me;
}());
exports.Me = Me;
