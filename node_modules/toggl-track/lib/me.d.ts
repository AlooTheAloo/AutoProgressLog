import { Toggl } from './toggl';
export declare class Me {
    protected toggl: Toggl;
    constructor(toggl: Toggl);
    /**
     * GET Me​
     * Returns details for the current user.
     *
     * https://developers.track.toggl.com/docs/api/me#get-me
     */
    get(): Promise<any>;
    /**
     * PUT Me​
     * Updates details for the current user.
     *
     * https://developers.track.toggl.com/docs/api/me#put-me
     */
    update(body: {
        beginningOfWeek?: number;
        countryId?: number;
        currentPassword?: string;
        defaultWorkspaceId?: number;
        email?: string;
        fullname?: string;
        password?: string;
        timezone?: string;
    }): Promise<any>;
    /**
     * GET Clients​
     * Get Clients.
     *
     * https://developers.track.toggl.com/docs/api/me#get-clients
     */
    clients(): Promise<any>;
    /**
     * POST CloseAccount​
     * Close Account
     *
     * https://developers.track.toggl.com/docs/api/me#post-closeaccount
     */
    closeAccount(): Promise<any>;
    /**
     * GET Features​
     * Get features.
     *
     * https://developers.track.toggl.com/docs/api/me#get-features
     */
    features(): Promise<any>;
    /**
     * GET User's last known location
     * Returns the client's IP-based location. If no data is present, empty response will be yielded.
     *
     * https://developers.track.toggl.com/docs/api/me#get-users-last-known-location
     */
    location(): Promise<any>;
    /**
     * GET Logged​
     * Returns whether the current user is logged in or not.
     *
     * https://developers.track.toggl.com/docs/api/me#get-logged
     */
    logged(): Promise<any>;
    lostPassword: {
        /**
         * GET LostPassword
         * Verifies the user request to reset the password.
         *
         * https://developers.track.toggl.com/docs/api/me#get-logged
         */
        verify: () => Promise<any>;
        /**
         * POST LostPassword
         * Handles lost password request confirmation.
         *
         * https://developers.track.toggl.com/docs/api/me#get-logged
         */
        confirm: (body: {
            code?: string;
            password?: string;
            userId?: number;
        }) => Promise<any>;
        /**
         * POST LostPassword​
         * Handles the users request to reset the password.
         *
         * https://developers.track.toggl.com/docs/api/me#post-lostpassword-1
         */
        reset: (tokenCode: string, body: {
            email?: string;
        }) => Promise<any>;
    };
    /**
     * GET Organizations that a user is part of​
     * Get all organizations a given user is part of.
     *
     * https://developers.track.toggl.com/docs/api/me#get-organizations-that-a-user-is-part-of
     */
    organizations(): Promise<any>;
    /**
     * GET Projects​
     * Get projects​
     *
     * https://developers.track.toggl.com/docs/api/me#get-projects
     */
    projects(query?: {
        includeArchived?: boolean;
    }): Promise<any>;
    /**
     * GET ProjectsPaginated​
     * Get paginated projects.
     *
     * https://developers.track.toggl.com/docs/api/me#get-projectspaginated
     */
    projectsPaginated(query?: {
        startProjectId?: string;
    }): Promise<any>;
    /**
     * GET Tags​
     * Returns tags for the current user.
     *
     * https://developers.track.toggl.com/docs/api/me#get-tags
     */
    tags(): Promise<any>;
    /**
     * GET Tasks​
     * Returns tasks from projects in which the user is participating.
     *
     * https://developers.track.toggl.com/docs/api/me#get-tasks
     */
    tasks(query?: {
        since?: Date | string;
        includeNotActive?: boolean;
    }): Promise<any>;
    /**
     * GET TrackReminders​
     * Returns a list of track reminders.
     *
     * https://developers.track.toggl.com/docs/api/me#get-trackreminders
     */
    trackReminders(): Promise<any>;
    /**
     * GET WebTimer​
     * Get web timer.
     *
     * https://developers.track.toggl.com/docs/api/me#get-webtimer
     */
    webTimer(): Promise<any>;
}
export interface IMe {
    api_token?: string;
    at: string;
    beginning_of_week: number;
    country_id: number;
    created_at: string;
    default_workspace_id: number;
    email: string;
    fullname: string;
    id: number;
    image_url: string;
    intercom_hash?: string;
    openid_email: string;
    openid_enabled: boolean;
    options: any;
    timezone: string;
    updated_at: string;
}
export interface ILocation {
    city: string;
    city_lat_long: string;
    country_code: string;
    country_name: string;
    state: string;
}
export interface IClient {
    id: number;
    wid: number;
    name: string;
    at: string;
}
export interface IFeature {
    feature_id: number;
    name: string;
    enabled: boolean;
}
export interface IWorkspaceFeatures {
    workspace_id: number;
    features: IFeature[];
}
export interface IOrganization {
    id: number;
    name: string;
    pricing_plan_id: number;
    created_at: string;
    at: string;
    server_deleted_at: null | string;
    is_multi_workspace_enabled: boolean;
    suspended_at: null | string;
    user_count: number;
    trial_info: {
        trial: boolean;
        trial_available: boolean;
        trial_end_date: null | string;
        next_payment_date: null | string;
        last_pricing_plan_id: null | number;
    };
    is_chargify: boolean;
    max_workspaces: number;
    admin: boolean;
    owner: boolean;
}
